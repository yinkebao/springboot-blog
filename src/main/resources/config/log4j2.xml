<?xml version="1.0" encoding="UTF-8"?>

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<Configuration monitorInterval="1800">
    <!-- 变量配置 -->
    <properties>
        <property name="LOG_HOME">./logs</property>
        <property name="ERROR_LOG_FILE_NAME">springBootEs</property>
    </properties>

    <!--先定义所有的appender-->
    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="Console" target="SYSTEM_OUT">
            <!--控制台只输出level及其以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <!--输出日志的格式-->
            <PatternLayout pattern="%[%d{HH:mm:ss:SSS}] [%p] - %l - %m%n" />
        </Console>

        <RollingRandomAccessFile name="ErrorLog" immediateFlush="true" fileName="${LOG_HOME}/${ERROR_LOG_FILE_NAME}.log" filePattern="${LOG_HOME}/${ERROR_LOG_FILE_NAME}.log.%d{yyyy-MM-dd}-%i">
            <!--输出日志的格式-->
            <PatternLayout pattern="%date{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{36}.%M@%L - %msg%n"/>
            <Policies>
                <!-- 这个配置需要和filePattern结合使用，注意filePattern中配置的文件重命名规则是 -->
                <!-- interval：表示历史日志封存间隔时间，单位为filePattern设置的单位值
                     modulate：表示是否历史日志生成时间纠偏，纠偏以零点为基准进行。比如：15:16生成了msg.2017041715.zip文件，那么纠偏后会在16:00生成msg.2017041716.zip -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 指定当文件体积大于size指定的值时，触发Rolling -->
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <Filters>
                <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            </Filters>
            <!-- 指定最多保存的文件个数 -->
            <DefaultRolloverStrategy max="20"/>
        </RollingRandomAccessFile>
    </Appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>

        <logger name="org.springframework.jms.listener.DefaultMessageListenerContainer" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="org.springframework.transaction.support.TransactionSynchronizationManager" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>

        <!-- 定义名字为com.es.hfuu的Logger，其日志级别为info，additivity为false -->
        <logger name="com.es.hfuu" level="info" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>


        <logger name="com.ibatis" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="com.ibatis.common.jdbc.SimpleDataSource" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="com.ibatis.common.jdbc.ScriptRunner" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="com.ibatis.sqlmap.engine.impl.SqlMapClientDelegate" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="java.sql.Connection" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="java.sql.Statement" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="java.sql.PreparedStatement" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="java.sql.ResultSet" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>

        <logger name="org.apache.struts2" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="com.opensymphony.xwork2" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="ognl" level="debug" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="org.apache.struts2.util.StrutsTypeConverter" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>
        <logger name="org.springframework.aop.framework.CglibAopProxy" level="error" includeLocation="true" additivity="false">
            <appender-ref ref="ErrorLog"/>
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </logger>

        <!-- 定义Root Logger，其日志级别为error -->
        <root level="error" includeLocation="true">
            <!-- Root Logger的Appender引用上面定义的Console -->
            <appender-ref ref="Console"/>
        </root>

    </Loggers>
</Configuration>